{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/ContactList/ContactList.module.scss","components/Filter/Filter.module.scss","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ContactForm","onClick","useState","name","setName","number","setNumber","id","className","styles","formStyle","htmlFor","labelInput","inputStyle","type","value","pattern","title","onChange","evt","target","required","formButton","preventDefault","ContactList","contacts","onDelete","listStyle","map","contact","item","itemInternal","deleteButton","Filter","filterContainer","filterStyle","defaultProps","App","setContacts","filter","setFilter","useEffect","existingContacts","localStorage","getItem","JSON","parse","setItem","stringify","find","alert","uuidv4","toUpperCase","includes","nameForDelete","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6IACAA,EAAOC,QAAU,CAAC,UAAY,+BAA+B,WAAa,gCAAgC,WAAa,gCAAgC,WAAa,kC,gBCApKD,EAAOC,QAAU,CAAC,UAAY,+BAA+B,OAAS,4BAA4B,KAAO,0BAA0B,aAAe,oC,mBCAlJD,EAAOC,QAAU,CAAC,gBAAkB,gCAAgC,YAAc,4BAA4B,WAAa,6B,0KCI9GC,EAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAE1B,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KASA,OACI,uBAAMC,GAAG,cAAcC,UAAWC,IAAOC,UAAzC,UACI,uBAAOC,QAAQ,cAAcH,UAAWC,IAAOG,WAA/C,kBACA,uBACIL,GAAG,cACHC,UAAWC,IAAOI,WAClBC,KAAK,OACLX,KAAK,OACLY,MAAOZ,EACPa,QAAQ,yHACRC,MAAM,qcAENC,SAAW,SAAAC,GAAG,OAAIf,EAAQe,EAAIC,OAAOL,QACrCM,UAAQ,IAEZ,uBAAOV,QAAQ,gBAAgBH,UAAWC,IAAOG,WAAjD,oBACA,uBACIL,GAAG,gBACHC,UAAWC,IAAOI,WAClBC,KAAK,MACLX,KAAK,SACLY,MAAOV,EACPW,QAAQ,yFACRC,MAAM,giBACNC,SAAW,SAAAC,GAAG,OAAIb,EAAUa,EAAIC,OAAOL,QACvCM,UAAQ,IAEZ,wBACIP,KAAK,SACLC,MAAM,SACNP,UAAWC,IAAOa,WAClBrB,QAtCS,SAACkB,GAClBA,EAAII,iBACJtB,EAAQE,EAAME,GACdD,EAAQ,IACRE,EAAU,KA8BN,6B,wBCzCCkB,EAAc,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACpC,OACI,oBAAIlB,UAAWC,IAAOkB,UAAtB,SACKF,EAASG,KAAI,SAAAC,GACV,OACI,oBAAqBrB,UAAWC,IAAOqB,KAAvC,SACI,sBAAKtB,UAAWC,IAAOsB,aAAvB,UACA,sBAAMvB,UAAWC,IAAON,KAAxB,SAA+B0B,EAAQ1B,OADvC,IAEK,sBAAMK,UAAWC,IAAOJ,OAAxB,SAAiCwB,EAAQxB,SAE1C,wBAAQS,KAAK,SAASX,KAAM0B,EAAQ1B,KAAMK,UAAWC,IAAOuB,aAAc/B,QAASyB,EAAnF,wBALCG,EAAQtB,U,gBCLxB0B,EAAS,SAAC,GAAyB,IAAvBlB,EAAsB,EAAtBA,MAAOG,EAAe,EAAfA,SAC5B,OACI,sBAAKV,UAAWC,IAAOyB,gBAAvB,UACI,uBAAOvB,QAAQ,cAAcH,UAAWC,IAAOG,WAA/C,mCACA,uBACIL,GAAG,SACHC,UAAWC,IAAO0B,YAClBrB,KAAK,OACLX,KAAK,SACLY,MAAOA,EACPC,QAAQ,yHACRC,MAAM,qcAENC,SAAUA,QAM1Be,EAAOG,aAAe,CAClBrB,MAAO,IChBX,IA6CesB,EA7CH,WAEV,MAAgCnC,mBAAS,IAAzC,mBAAOuB,EAAP,KAAiBa,EAAjB,KACA,EAA4BpC,mBAAS,IAArC,mBAAOqC,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACR,IAAMC,EAAmBC,aAAaC,QAAQ,YAAcC,KAAKC,MAAMH,aAAaC,QAAQ,aAAe,GAC3GN,EAAYI,KACX,IAEHD,qBAAU,WACRE,aAAaI,QAAQ,WAAYF,KAAKG,UAAUvB,MAC/C,CAACA,IAoBJ,OACE,qBAAKjB,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACE,2CACA,cAAC,EAAD,CAAaP,QAtBF,SAACE,EAAME,GACxB,GAAIoB,EAASwB,MAAK,SAAApB,GAAO,OAAIA,EAAQ1B,OAASA,KAC5C+C,MAAM/C,EAAO,+BADf,CAIA,IAAM0B,EAAU,CAAEtB,GAAI4C,cAAUhD,KAAMA,EAAME,OAAQA,GACpDiC,EAAY,GAAD,mBAAKb,GAAL,CAAeI,SAiBpB,0CACA,cAAC,EAAD,CAAQd,MAAOwB,EAAQrB,SAAW,SAAAC,GAAG,OAAIqB,EAAUrB,EAAIC,OAAOL,UAC9D,cAAC,EAAD,CAAaU,SAfZA,EAASc,QAAO,SAAAV,GAAO,OAAIA,EAAQ1B,KAAKiD,cAAcC,SAASd,EAAOa,iBAAe,GAe3C1B,SAZ7B,SAACP,GACrB,IAAMmC,EAAgBnC,EAAIC,OAAOjB,KACjCmC,EAAYb,EAASc,QAAO,SAAAV,GAAO,OAAIA,EAAQ1B,OAASmD,eCxB7CC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dac86769.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formStyle\":\"ContactForm_formStyle__11DV7\",\"inputStyle\":\"ContactForm_inputStyle__2ElFp\",\"labelInput\":\"ContactForm_labelInput__3EAMW\",\"formButton\":\"ContactForm_formButton__2APQY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listStyle\":\"ContactList_listStyle__1h9h5\",\"number\":\"ContactList_number__1we31\",\"item\":\"ContactList_item__1JVjM\",\"deleteButton\":\"ContactList_deleteButton__27eQO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterContainer\":\"Filter_filterContainer__19hog\",\"filterStyle\":\"Filter_filterStyle__3ZU5m\",\"labelInput\":\"Filter_labelInput__1An-y\"};","import styles from './ContactForm.module.scss';\r\nimport PropTypes from 'prop-types';\r\nimport { useState } from \"react\";\r\n\r\n\r\nexport const ContactForm = ({ onClick }) => {\r\n\r\n    const [name, setName] = useState(\"\");\r\n    const [number, setNumber] = useState(\"\");\r\n\r\n    const handleSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        onClick(name, number);\r\n        setName(\"\");\r\n        setNumber(\"\");\r\n    }\r\n\r\n    return (\r\n        <form id=\"contactForm\" className={styles.formStyle}>\r\n            <label htmlFor=\"contactName\" className={styles.labelInput}>Name</label>\r\n            <input\r\n                id=\"contactName\"\r\n                className={styles.inputStyle}\r\n                type=\"text\"\r\n                name=\"name\"\r\n                value={name}\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. \r\n                    Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                onChange={ evt => setName(evt.target.value) }\r\n                required\r\n            />\r\n            <label htmlFor=\"contactNumber\" className={styles.labelInput}>Number</label>\r\n            <input\r\n                id=\"contactNumber\"\r\n                className={styles.inputStyle}\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                value={number}\r\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                onChange={ evt => setNumber(evt.target.value) }\r\n                required\r\n            />\r\n            <button\r\n                type=\"button\"\r\n                value=\"Submit\"\r\n                className={styles.formButton}\r\n                onClick={handleSubmit}\r\n                >Add contact\r\n            </button>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nContactForm.propTypes = {\r\n    onClick: PropTypes.func.isRequired\r\n}\r\n","import styles from './ContactList.module.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const ContactList = ({ contacts, onDelete }) => {\r\n    return (\r\n        <ul className={styles.listStyle}>\r\n            {contacts.map(contact => {\r\n                return (\r\n                    <li key={contact.id} className={styles.item}>\r\n                        <div className={styles.itemInternal}>\r\n                        <span className={styles.name}>{contact.name}</span>\r\n                            :<span className={styles.number}>{contact.number}</span>\r\n                        \r\n                            <button type='button' name={contact.name} className={styles.deleteButton} onClick={onDelete}>Delete</button>\r\n                        </div>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>      \r\n    );\r\n}\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired\r\n    }))\r\n}\r\n","import styles from './Filter.module.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const Filter = ({ value, onChange }) => {\r\n    return (\r\n        <div className={styles.filterContainer}>\r\n            <label htmlFor=\"contactName\" className={styles.labelInput}>Find contacts by name</label>\r\n            <input\r\n                id=\"filter\"\r\n                className={styles.filterStyle}\r\n                type=\"text\"\r\n                name=\"filter\"\r\n                value={value}\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. \r\n                    Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                onChange={onChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nFilter.defaultProps = {\r\n    value: ''\r\n}\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func.isRequired\r\n}","import './App.css';\nimport { useState, useEffect } from 'react';\nimport { ContactForm } from './components/ContactForm';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ContactList } from './components/ContactList';\nimport { Filter } from './components/Filter';\n\nconst App = () => {\n\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    const existingContacts = localStorage.getItem('contacts') ? JSON.parse(localStorage.getItem('contacts')) : [];\n    setContacts(existingContacts);\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = (name, number) => {\n    if (contacts.find(contact => contact.name === name)) {\n      alert(name + ' is already in contacts');\n      return;\n    }\n    const contact = { id: uuidv4(), name: name, number: number };\n    setContacts([...contacts, contact]);\n  }\n\n  const getFilteredArray = () => {\n    return contacts.filter(contact => contact.name.toUpperCase().includes(filter.toUpperCase()),0);\n  }\n\n  const deleteContact = (evt) => {\n    const nameForDelete = evt.target.name;\n    setContacts(contacts.filter(contact => contact.name !== nameForDelete));\n  }\n\n  return (\n    <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Phonebook</h1>\n          <ContactForm onClick={addContact} />\n          <h2>Contacts</h2>\n          <Filter value={filter} onChange={ evt => setFilter(evt.target.value) }/>\n          <ContactList contacts={getFilteredArray()} onDelete={deleteContact} />\n        </header>\n      </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}